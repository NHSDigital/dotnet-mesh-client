namespace NHS.MESH.Client.UnitTests;

using System.Net;
using Moq;
using NHS.MESH.Client.Contracts.Clients;
using NHS.MESH.Client.Contracts.Configurations;
using NHS.MESH.Client.Contracts.Services;
using NHS.MESH.Client.Services;

[TestClass]
public class MeshOutboxServiceTests
{
    private readonly Mock<IMeshConnectConfiguration> _meshConnectConfiguration;
    private readonly Mock<IMeshConnectClient> _meshConnectClient;
    private readonly Mock<IMeshOperationService> _meshOperationService;
    private readonly IMeshOutboxService _meshOutboxService;

    public MeshOutboxServiceTests()
    {
        _meshConnectConfiguration = new Mock<IMeshConnectConfiguration>(MockBehavior.Strict);
        _meshConnectClient = new Mock<IMeshConnectClient>(MockBehavior.Strict);
        _meshOperationService = new Mock<IMeshOperationService>(MockBehavior.Strict);

        _meshOutboxService = new MeshOutboxService(
            _meshConnectConfiguration.Object,
            _meshConnectClient.Object,
            _meshOperationService.Object
        );

        // Setup default values for configuration mock
        _meshConnectConfiguration.SetupGet(c => c.MeshApiBaseUrl).Returns("https://api.mesh.com");
        _meshConnectConfiguration.SetupGet(c => c.MeshApiOutboxUriPath).Returns("outbox");
    }

    [TestMethod]
    public void SendCompressedMessageAsync_FromMailboxIdNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendCompressedMessageAsync(null, "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("fromMailboxId"));
    }

    [TestMethod]
    public void SendCompressedMessageAsync_ToMailboxIdNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendCompressedMessageAsync("fromMailboxId", null, fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("toMailboxId"));
    }

    [TestMethod]
    public void SendCompressedMessageAsync_MeshApiBaseUrlNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();
        _meshConnectConfiguration.SetupGet(c => c.MeshApiBaseUrl).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendCompressedMessageAsync("fromMailboxId", "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiBaseUrl"));
    }

    [TestMethod]
    public void SendCompressedMessageAsync_MeshApiOutboxUriPathNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();
        _meshConnectConfiguration.SetupGet(c => c.MeshApiOutboxUriPath).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendCompressedMessageAsync("fromMailboxId", "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiOutboxUriPath"));
    }

    [TestMethod]
    public async Task SendCompressedMessageAsync_HandshakeFails_ReturnsHandshakeError()
    {
        // Arrange
        var fromMailboxId = "fromMailboxId";
        var toMailboxId = "toMailboxId";
        var fileMock = new Mock<IFormFile>();
        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.Unauthorized, "Unauthorized");
        _meshOperationService.Setup(s => s.MeshHandshakeAsync(fromMailboxId)).ReturnsAsync(handshakeResult);

        // Act
        var result = await _meshOutboxService.SendCompressedMessageAsync(fromMailboxId, toMailboxId, fileMock.Object);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.Unauthorized));
        Assert.That(result.Value, Is.EqualTo("Unauthorized"));
    }

    [TestMethod]
    public async Task SendCompressedMessageAsync_ValidInputs_ReturnsSuccessfulResponse()
    {
        // Arrange
        var fromMailboxId = "fromMailboxId";
        var toMailboxId = "toMailboxId";
        var fileMock = new Mock<IFormFile>();
        fileMock.Setup(f => f.OpenReadStream()).Returns(new MemoryStream(new byte[] { 1, 2, 3, 4 }));

        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "OK");
        var response = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "Success");

        _meshOperationService.Setup(s => s.MeshHandshakeAsync(fromMailboxId)).ReturnsAsync(handshakeResult);
        _meshConnectClient.Setup(c => c.SendRequestAsync(It.IsAny<HttpRequestMessage>())).ReturnsAsync(response);

        // Act
        var result = await _meshOutboxService.SendCompressedMessageAsync(fromMailboxId, toMailboxId, fileMock.Object);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.OK));
        Assert.That(result.Value, Is.EqualTo("Success"));
    }


    [TestMethod]
    public void SendUnCompressedMessageAsync_FromMailboxIdNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendUnCompressedMessageAsync(null, "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("fromMailboxId"));
    }

    [TestMethod]
    public void SendUnCompressedMessageAsync_ToMailboxIdNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendUnCompressedMessageAsync("fromMailboxId", null, fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("toMailboxId"));
    }

    [TestMethod]
    public void SendUnCompressedMessageAsync_MeshApiBaseUrlNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();
        _meshConnectConfiguration.SetupGet(c => c.MeshApiBaseUrl).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendUnCompressedMessageAsync("fromMailboxId", "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiBaseUrl"));
    }

    [TestMethod]
    public void SendUnCompressedMessageAsync_MeshApiOutboxUriPathNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();
        _meshConnectConfiguration.SetupGet(c => c.MeshApiOutboxUriPath).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendUnCompressedMessageAsync("fromMailboxId", "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiOutboxUriPath"));
    }

    [TestMethod]
    public async Task SendUnCompressedMessageAsync_HandshakeFails_ReturnsHandshakeError()
    {
        // Arrange
        var fromMailboxId = "fromMailboxId";
        var toMailboxId = "toMailboxId";
        var fileMock = new Mock<IFormFile>();
        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.Unauthorized, "Unauthorized");
        _meshOperationService.Setup(s => s.MeshHandshakeAsync(fromMailboxId)).ReturnsAsync(handshakeResult);

        // Act
        var result = await _meshOutboxService.SendUnCompressedMessageAsync(fromMailboxId, toMailboxId, fileMock.Object);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.Unauthorized));
        Assert.That(result.Value, Is.EqualTo("Unauthorized"));
    }

    [TestMethod]
    public async Task SendUnCompressedMessageAsync_ValidInputs_ReturnsSuccessfulResponse()
    {
        // Arrange
        var fromMailboxId = "fromMailboxId";
        var toMailboxId = "toMailboxId";
        var fileMock = new Mock<IFormFile>();
        fileMock.Setup(f => f.OpenReadStream()).Returns(new MemoryStream(new byte[] { 1, 2, 3, 4 }));

        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "OK");
        var response = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "Success");

        _meshOperationService.Setup(s => s.MeshHandshakeAsync(fromMailboxId)).ReturnsAsync(handshakeResult);
        _meshConnectClient.Setup(c => c.SendRequestAsync(It.IsAny<HttpRequestMessage>())).ReturnsAsync(response);

        // Act
        var result = await _meshOutboxService.SendUnCompressedMessageAsync(fromMailboxId, toMailboxId, fileMock.Object);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.OK));
        Assert.That(result.Value, Is.EqualTo("Success"));
    }


    [TestMethod]
    public void SendChunkedMessageAsync_FromMailboxIdNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendChunkedMessageAsync(null, "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("fromMailboxId"));
    }

    [TestMethod]
    public void SendChunkedMessageAsync_ToMailboxIdNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fromMailboxId = "fromMailboxId";
        var fileMock = new Mock<IFormFile>();
        _meshOperationService.Setup(s => s.MeshHandshakeAsync(fromMailboxId))
            .ReturnsAsync(new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "OK"));

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendChunkedMessageAsync(fromMailboxId, null, fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("toMailboxId"));
    }

    [TestMethod]
    public void SendChunkedMessageAsync_MeshApiBaseUrlNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();
        _meshConnectConfiguration.SetupGet(c => c.MeshApiBaseUrl).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendChunkedMessageAsync("fromMailboxId", "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiBaseUrl"));
    }

    [TestMethod]
    public void SendChunkedMessageAsync_MeshApiOutboxUriPathNull_ThrowsArgumentNullException()
    {
        // Arrange
        var fileMock = new Mock<IFormFile>();
        _meshConnectConfiguration.SetupGet(c => c.MeshApiOutboxUriPath).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.SendChunkedMessageAsync("fromMailboxId", "toMailboxId", fileMock.Object)
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiOutboxUriPath"));
    }

    [TestMethod]
    public async Task SendChunkedMessageAsync_HandshakeFails_ReturnsHandshakeError()
    {
        // Arrange
        var fromMailboxId = "fromMailboxId";
        var toMailboxId = "toMailboxId";
        var fileMock = new Mock<IFormFile>();
        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.Unauthorized, "Unauthorized");
        _meshOperationService.Setup(s => s.MeshHandshakeAsync(fromMailboxId)).ReturnsAsync(handshakeResult);

        // Act
        var result = await _meshOutboxService.SendChunkedMessageAsync(fromMailboxId, toMailboxId, fileMock.Object);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.Unauthorized));
        Assert.That(result.Value, Is.EqualTo("Unauthorized"));
    }

    [TestMethod]
    public async Task SendChunkedMessageAsync_ValidInputs_ReturnsSuccessfulResponse()
    {
        // Arrange
        var fromMailboxId = "fromMailboxId";
        var toMailboxId = "toMailboxId";
        var fileMock = new Mock<IFormFile>();
        fileMock.Setup(f => f.OpenReadStream()).Returns(new MemoryStream(new byte[] { 1, 2, 3, 4 }));

        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "OK");
        var initialResponse = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.Accepted, System.Text.Json.JsonSerializer.Serialize(new SendMessageResponse { MessageId = "messageId" }, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }));
        var subsequentResponse = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "Success");

        _meshOperationService.Setup(s => s.MeshHandshakeAsync(fromMailboxId)).ReturnsAsync(handshakeResult);
        _meshConnectClient.SetupSequence(c => c.SendRequestAsync(It.IsAny<HttpRequestMessage>()))
            .ReturnsAsync(initialResponse) // Initial request
            .ReturnsAsync(subsequentResponse); // Subsequent chunk requests

        // Act
        var result = await _meshOutboxService.SendChunkedMessageAsync(fromMailboxId, toMailboxId, fileMock.Object);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.Accepted));
        Assert.That(result.Value, Does.Contain("messageId"));
    }



    [TestMethod]
    public void TrackMessageByIdAsync_MailboxIdNull_ThrowsArgumentNullException()
    {
        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.TrackMessageByIdAsync(null, "messageId")
        );

        Assert.That(exception!.ParamName, Is.EqualTo("mailboxId"));
    }

    [TestMethod]
    public void TrackMessageByIdAsync_MeshApiBaseUrlNull_ThrowsArgumentNullException()
    {
        // Arrange
        _meshConnectConfiguration.SetupGet(c => c.MeshApiBaseUrl).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.TrackMessageByIdAsync("mailboxId", "messageId")
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiBaseUrl"));
    }

    [TestMethod]
    public void TrackMessageByIdAsync_MeshApiOutboxUriPathNull_ThrowsArgumentNullException()
    {
        // Arrange
        _meshConnectConfiguration.SetupGet(c => c.MeshApiOutboxUriPath).Returns((string)null);

        // Act & Assert
        var exception = Assert.ThrowsAsync<ArgumentNullException>(async () =>
            await _meshOutboxService.TrackMessageByIdAsync("mailboxId", "messageId")
        );

        Assert.That(exception!.ParamName, Is.EqualTo("MeshApiOutboxUriPath"));
    }

    [TestMethod]
    public async Task TrackMessageByIdAsync_HandshakeFails_ReturnsHandshakeError()
    {
        // Arrange
        var mailboxId = "mailboxId";
        var messageId = "messageId";
        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.Unauthorized, "Unauthorized");

        _meshOperationService.Setup(s => s.MeshHandshakeAsync(mailboxId)).ReturnsAsync(handshakeResult);
        _meshConnectConfiguration.SetupGet(c => c.MeshApiBaseUrl).Returns("https://api.mesh.com");
        _meshConnectConfiguration.SetupGet(c => c.MeshApiOutboxUriPath).Returns("outbox");
        _meshConnectConfiguration.SetupGet(c => c.MeshApiInboxUriPath).Returns("inbox");
        _meshConnectConfiguration.SetupGet(c => c.MeshApiTrackMessageUriPath).Returns("track");

        // Act
        var result = await _meshOutboxService.TrackMessageByIdAsync(mailboxId, messageId);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.Unauthorized));
        Assert.That(result.Value, Is.EqualTo("Unauthorized"));
    }

    [TestMethod]
    public async Task TrackMessageByIdAsync_ValidInputs_ReturnsSuccessfulResponse()
    {
        // Arrange
        var mailboxId = "mailboxId";
        var messageId = "messageId";
        var handshakeResult = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "OK");
        var response = new KeyValuePair<HttpStatusCode, string>(HttpStatusCode.OK, "Success");

        _meshOperationService.Setup(s => s.MeshHandshakeAsync(mailboxId)).ReturnsAsync(handshakeResult);
        _meshConnectConfiguration.SetupGet(c => c.MeshApiBaseUrl).Returns("https://api.mesh.com");
        _meshConnectConfiguration.SetupGet(c => c.MeshApiOutboxUriPath).Returns("outbox");
        _meshConnectConfiguration.SetupGet(c => c.MeshApiInboxUriPath).Returns("inbox");
        _meshConnectConfiguration.SetupGet(c => c.MeshApiTrackMessageUriPath).Returns("track");

        _meshConnectClient.Setup(c => c.SendRequestAsync(It.IsAny<HttpRequestMessage>())).ReturnsAsync(response);

        // Act
        var result = await _meshOutboxService.TrackMessageByIdAsync(mailboxId, messageId);

        // Assert
        Assert.That(result.Key, Is.EqualTo(HttpStatusCode.OK));
        Assert.That(result.Value, Is.EqualTo("Success"));
    }
}
